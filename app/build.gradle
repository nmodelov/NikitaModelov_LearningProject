apply plugin: 'com.android.application'
apply plugin: 'kotlin-android'
apply plugin: 'kotlin-android-extensions'
apply plugin: 'kotlin-kapt'

apply plugin: 'de.mannodermaus.android-junit5'

android {
    compileSdkVersion project.ext.compileSdkVersion

    defaultConfig {
        applicationId "com.apps65.mvitemplate"
        minSdkVersion project.ext.minSdkVersion
        targetSdkVersion project.ext.targetSdkVersion
        versionCode 1
        versionName "1.0"

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
        testInstrumentationRunnerArgument "runnerBuilder", "de.mannodermaus.junit5.AndroidJUnit5Builder"
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

    kotlinOptions {
        jvmTarget = "1.8"
        freeCompilerArgs += "-Xopt-in=kotlin.RequiresOptIn"
    }

    buildFeatures.viewBinding = true

    lintOptions {
        checkGeneratedSources = true // keep it true, otherwise lint will mark activitie's
        // layouts as unused, because it inflates though the class generated by ViewBinding
    }

    testOptions {
        junitPlatform {
            filters {
                engines {
                    include 'spek2'
                }
            }
            jacocoOptions {
                // here goes all jacoco config, for example
                html.enabled = true
                xml.enabled = false
                csv.enabled = false
                unitTests.all {
                    testLogging.events = ["passed", "skipped", "failed"]
                }
            }
        }
        unitTests.returnDefaultValues = true
    }

    // Add Kotlin source directory to all source sets
    sourceSets {
        main.java.srcDirs += 'src/main/kotlin'
        test.java.srcDirs += 'src/test/kotlin'
    }

    packagingOptions {
        exclude 'META-INF/LICENSE*'
    }
}

dependencies {
    implementation dep('org.jetbrains.kotlin:kotlin-stdlib')
    implementation dep('org.jetbrains.kotlinx:kotlinx-coroutines-core')
    implementation dep('org.jetbrains.kotlinx:kotlinx-coroutines-android')

    implementation dep('androidx.core:core-ktx')
    implementation dep('androidx.appcompat:appcompat')
    implementation dep('com.google.android.material:material')
    implementation dep('androidx.constraintlayout:constraintlayout')

    // assertion
    testImplementation dep('org.jetbrains.kotlin:kotlin-test')
    testImplementation dep('org.assertj:assertj-core')

    // spek2
    testImplementation dep('org.spekframework.spek2:spek-dsl-jvm')
    testImplementation dep('org.spekframework.spek2:spek-runner-junit5')
    testImplementation dep('org.jetbrains.kotlin:kotlin-reflect')
    testImplementation dep('org.jetbrains.kotlin:kotlin-stdlib-jdk8')

    androidTestImplementation dep('de.mannodermaus.junit5:android-test-core')
    androidTestRuntimeOnly dep('de.mannodermaus.junit5:android-test-runner')

    androidTestImplementation dep('com.kaspersky.android-components:kaspresso')

    testImplementation dep('org.jetbrains.kotlinx:kotlinx-coroutines-test')
    testImplementation dep('com.arkivanov.mvikotlin:rx')

    api project(":netutils")
    api project(":mvi")

    // MVI Kotlin
    implementation dep('com.arkivanov.mvikotlin:mvikotlin')
    implementation dep('com.arkivanov.mvikotlin:mvikotlin-main')
    implementation dep('com.arkivanov.mvikotlin:mvikotlin-extensions-coroutines')
    // Spek2 plugin classpath fix
    testImplementation dep('com.arkivanov.mvikotlin:utils-internal')

    // Dagger2
    implementation dep("com.google.dagger:dagger")
    implementation dep("com.google.dagger:dagger-android")
    implementation dep("com.google.dagger:dagger-android-support")
    kapt dep("com.google.dagger:dagger-compiler")
    kapt dep("com.google.dagger:dagger-android-processor")

    // Cicerone
    implementation dep('ru.terrakok.cicerone:cicerone')

    // Preference
    implementation dep("androidx.preference:preference-ktx")

    // Timber
    implementation dep('com.jakewharton.timber:timber')
}
